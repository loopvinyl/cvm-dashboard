import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# ==============================
# CONFIGURA√á√ïES INICIAIS
# ==============================
st.set_page_config(page_title="Dashboard CVM - Indicadores", layout="wide")
st.title("üìä Dashboard CVM - An√°lise de Indicadores Financeiros")

# ==============================
# LEITURA DE DADOS
# ==============================
@st.cache_data
def load_data():
    df = pd.read_excel("data_frame.xlsx")
    
    # Normalizar nomes das colunas
    df.columns = [c.strip() for c in df.columns]
    
    # Adicionar uma coluna 'Ano' com os dados da coluna 'Data Recente'
    df['Ano'] = pd.to_datetime(df['Data Recente']).dt.year
    df['Ticker'] = 'CPFE3' # Simula√ß√£o, pois a planilha n√£o cont√©m a coluna
    
    # Ordem de Ticker e Data para c√°lculos com .shift()
    df = df.sort_values(by=['Ticker', 'Ano']).reset_index(drop=True)

    # CALCULAR INDICADORES CONFORME ABA "INDICADORES" DO EXCEL
    
    # Valores M√©dios do Per√≠odo Anterior
    df["Ativo Total Anterior"] = df.groupby("Ticker")["Ativo Total"].shift(1)
    df["PL Consolidado Anterior"] = df.groupby("Ticker")["Patrim√¥nio L√≠quido Consolidado"].shift(1)
    df["Passivo Oneroso Anterior"] = df.groupby("Ticker")["Empr√©stimos e Financiamentos - Circulante"].shift(1).fillna(0) + df.groupby("Ticker")["Empr√©stimos e Financiamentos - N√£o Circulante"].shift(1).fillna(0)

    # 1. ROA (Return on Assets) - APENAS PARA LUCRO POSITIVO E ATIVO M√âDIO POSITIVO
    df["Ativo M√©dio"] = (df["Ativo Total"] + df["Ativo Total Anterior"]) / 2
    df["ROA"] = np.where(
        (df["Ativo M√©dio"] > 0) & (df["Lucro/Preju√≠zo Consolidado do Per√≠odo"] > 0),
        df["Lucro/Preju√≠zo Consolidado do Per√≠odo"] / df["Ativo M√©dio"],
        np.nan
    )
    
    # 2. ROE (Return on Equity) - APENAS PARA LUCRO POSITIVO E PL M√âDIO POSITIVO
    df["PL M√©dio"] = (df["Patrim√¥nio L√≠quido Consolidado"] + df["PL Consolidado Anterior"]) / 2
    df["ROE"] = np.where(
        (df["PL M√©dio"] > 0) & (df["Lucro/Preju√≠zo Consolidado do Per√≠odo"] > 0),
        df["Lucro/Preju√≠zo Consolidado do Per√≠odo"] / df["PL M√©dio"],
        np.nan
    )
    
    # 3. Custo da D√≠vida (ki)
    df["Passivo Oneroso"] = df["Empr√©stimos e Financiamentos - Circulante"].fillna(0) + df["Empr√©stimos e Financiamentos - N√£o Circulante"].fillna(0)
    df["Passivo Oneroso M√©dio"] = (df["Passivo Oneroso"] + df["Passivo Oneroso Anterior"]) / 2
    df["ki"] = np.where(
        (df["Passivo Oneroso M√©dio"] != 0) & (df["Despesas Financeiras"].notna()),
        df["Despesas Financeiras"].abs() / df["Passivo Oneroso M√©dio"],
        np.nan
    )
    
    # 4. Custo do Capital Pr√≥prio (ke)
    df["ke"] = np.where(
        (df["PL M√©dio"] != 0) & (df["Dividendo e juros sobre o capital pr√≥prio pagos"].notna()),
        df["Dividendo e juros sobre o capital pr√≥prio pagos"].abs() / df["PL M√©dio"],
        np.nan
    )
    
    # 5. WACC (Weighted Average Cost of Capital)
    def calcular_wacc(row):
        try:
            if (pd.notna(row['Passivo Oneroso M√©dio']) and pd.notna(row['PL M√©dio']) and 
                pd.notna(row['ki']) and pd.notna(row['ke'])):
                
                total_capital = row['Passivo Oneroso M√©dio'] + row['PL M√©dio']
                if total_capital > 0:
                    percentual_terceiros = row['Passivo Oneroso M√©dio'] / total_capital
                    percentual_proprio = row['PL M√©dio'] / total_capital
                    return (row['ki'] * percentual_terceiros) + (row['ke'] * percentual_proprio)
            return np.nan
        except:
            return np.nan
            
    df["wacc"] = df.apply(calcular_wacc, axis=1)
    
    # 6. ROI (Return on Investment) - APENAS PARA LUCRO POSITIVO E INVESTIMENTO POSITIVO
    df["Investimento M√©dio"] = df["Passivo Oneroso M√©dio"] + df["PL M√©dio"]
    df["ROI"] = np.where(
        (df["Investimento M√©dio"] > 0) & (df["Lucro/Preju√≠zo Consolidado do Per√≠odo"] > 0),
        df["Lucro/Preju√≠zo Consolidado do Per√≠odo"] / df["Investimento M√©dio"],
        np.nan
    )

    # 7. Lucro Econ√¥mico
    df["Lucro Econ√¥mico 1"] = np.where(
        (df["ROI"].notna()) & (df["wacc"].notna()) & (df["Investimento M√©dio"].notna()),
        (df["ROI"] - df["wacc"]) * df["Investimento M√©dio"],
        np.nan
    )
    
    # Ajuste na f√≥rmula do Lucro Econ√¥mico 2 para refletir a planilha
    df["Lucro Econ√¥mico 2"] = np.where(
        (df["Lucro/Preju√≠zo Consolidado do Per√≠odo"].notna()) & 
        (df["Patrim√¥nio L√≠quido Consolidado"].notna()) & 
        (df["ke"].notna()),
        df["Lucro/Preju√≠zo Consolidado do Per√≠odo"] - (df["Patrim√¥nio L√≠quido Consolidado"] * df["ke"]),
        np.nan
    )

    # 8. Estrutura de Capital
    df["Percentual Capital Terceiros"] = np.where(
        df["Passivo Total"] != 0,
        (df["Passivo Circulante"].fillna(0) + df["Passivo N√£o Circulante"].fillna(0)) / df["Passivo Total"],
        np.nan
    )
    df["Percentual Capital Pr√≥prio"] = np.where(
        df["Passivo Total"] != 0,
        df["Patrim√¥nio L√≠quido Consolidado"] / df["Passivo Total"],
        np.nan
    )
    
    # 9. Margens
    df["Margem Bruta"] = np.where(
        df["Receita de Venda de Bens e/ou Servi√ßos"] != 0,
        df["Resultado Bruto"] / df["Receita de Venda de Bens e/ou Servi√ßos"],
        np.nan
    )
    df["Margem Operacional"] = np.where(
        df["Receita de Venda de Bens e/ou Servi√ßos"] != 0,
        df["Resultado Antes do Resultado Financeiro e dos Tributos"] / df["Receita de Venda de Bens e/ou Servi√ßos"],
        np.nan
    )
    df["Margem L√≠quida"] = np.where(
        df["Receita de Venda de Bens e/ou Servi√ßos"] != 0,
        df["Lucro/Preju√≠zo Consolidado do Per√≠odo"] / df["Receita de Venda de Bens e/ou Servi√ßos"],
        np.nan
    )
    
    # 10. EBITDA e ROI EBITDA
    df["EBITDA"] = np.where(
        (df["Resultado Antes do Resultado Financeiro e dos Tributos"].notna()) & 
        (df["Despesas Financeiras"].notna()),
        df["Resultado Antes do Resultado Financeiro e dos Tributos"] + df["Despesas Financeiras"].abs(),
        np.nan
    )
    
    df["ROI EBITDA"] = np.where(
        (df["EBITDA"].notna()) & (df["Investimento M√©dio"] != 0),
        df["EBITDA"] / df["Investimento M√©dio"],
        np.nan
    )
    
    df["Lucro Econ√¥mico EBITDA"] = np.where(
        (df["ROI EBITDA"].notna()) & (df["wacc"].notna()) & (df["Investimento M√©dio"].notna()),
        (df["ROI EBITDA"] - df["wacc"]) * df["Investimento M√©dio"],
        np.nan
    )
    
    return df

df = load_data()
